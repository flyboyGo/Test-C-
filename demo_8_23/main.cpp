#include <iostream>

using namespace std;

//C语言中的结构体模拟C++中类存在的问题
/*
 *定义一个结构体用来表示一个对象所包含的属性，函数用来表示一个对象所具有的
 行为，这样我们就表示出来一个事物，在 c 语言中，行为和属性是分开的，也就是
 说吃饭这个属性不属于某类对象，而属于所有的共同的数据，所以不单单是
 PeopleEat 可以调用 Person 数据，AnimalEat 也可以调用 Person 数据，那么万一
 调用错误，将会导致问题发生。
 */

//C++中对C语言中结构体的改进,提出了类的封装的思想
/*
 * 从这个案例我们应该可以体会到，属性和行为应该放在一起，一起表示一个具有属性和行为的对象。
 * 假如某对象的某项属性不想被外界获知，比如说漂亮女孩的年龄不想被其他人知道，那么年龄这条属性应该作
   为女孩自己知道的属性；或者女孩的某些行为不想让外界知道，只需要自己知道就可以。
   那么这种情况下，封装应该再提供一种机制能够给属性和行为的访问权限控制住。
   所以说封装特性包含两个方面，
   1、一个是属性和行为合成一个整体，
   2、一个是给属性和行为增加访问权限。
 */

/*
 * 封装
   1. 把变量（属性）和函数（操作）合成一个整体，封装在一个类中
   2. 对变量和函数进行访问权限控制
   3. 在类的内部(作用域范围内)，没有访问权限之分，所有成员可以相互访问
   4. 在类的外部(作用域范围外)，访问权限才有意义：public，private，protected
   5. 在类的外部，只有 public 修饰的成员才能被访问,在没有涉及继承与派生时,private和protected 是同等级的,外部不允许访问
 */


class Person //抽象概念(类有大小,但不分配空间)
{//类的内部
    private:
        double money; //私有数据
    protected:
        int age;
    public:
        void dese()
        {
            money = 10000;
            age = 24;
            cout << "我有房、有车、又年轻 :" << age <<"、又有钱 :" << money << endl;
        }
};

/*
 * [struct 和 class 的区别?] class的 "成员" 默认访问权限为 private(私有的),struct 默认访问权限为public.
 */

/*将成员变量设置为 private(私有)的好处
   1. 可赋予客户端访问数据的一致性。 如果成员变量不是 public，客户端唯一能
       够访问对象的方法就是通过成员函数。如果类中所有 public 权限的成员都是
      函数，客户在访问类成员时只会默认访问函数，不需要考虑访问的成员需不需
      要添加(),这就省下了许多搔首弄耳的时间。

   2. 可细微划分访问控制。 使用成员函数可使得我们对变量的控制处理更加精
      细。如果我们让所有的成员变量为 public，每个人都可以读写它。如果我们设
      置为 private，我们可以实现“不准访问”、“只读访问”、“读写访问”，甚至你可以写出“只写访问”。
 */

//class成员默认是私有的  数据私有、方法公有 用户就可以借助于 公有方法 间接的操作私有数据

void test01()
{
    //用类去实例化一个对象(用Person定义一个变量)
    Person jack;
    //cout << "兄弟你的钱数: " << jack.money << endl; // error money is private(类的外部不能访问)
    //cout << "兄弟你的年龄: " << jack.age << endl; // error age is protected(类的外部不能访问)
    jack.dese(); // success 公有的成员类地外部可以访问
    //private protected虽然是私有的、保护的 类的外部不可以访问
    //但是用户可以借助公有(public)的方法间接的访问私有、保护的数据
}

//int main(int argc, char *argv[])
//{
//    test01();
//    return 0;
//}
