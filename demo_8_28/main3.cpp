#include <iostream>

using namespace std;

/*
 * 在类定义中，前面有 static 说明的成员函数称为静态成员函数。
 * 静态成员函数使用方式和静态变量一样，同样在对象没有创建前，即可通过类名调用。
 * 静态成员函数主要为了访问静态变量，但是，不能访问普通成员变量。
 * 静态成员函数的意义，不在于信息共享，数据沟通，而在于管理静态数据成员，完成对静态数据成员的封装。
   静态成员函数只能访问静态变量，不能访问普通成员变量
   静态成员函数的使用和静态成员变量一样
   静态成员函数也有访问权限 普通成员函数可访问静态成员变量、也可以访问非经常成员变量
 */

class MyPerson
{
private :
    int num; //普通成员变量
    static int data; //静态成员变量(类中声明、类外定义,静态成员的大小不包括在类的大小中)
public :
    //普通成员函数 调用 依赖于 对象
    int getData(void)
    {
        return data;
    }

    //静态成员函数  属于类 而不属于对象
    static int getStaticData(void)
    {
        //num = 200; //静态成员函数不能访问非静态成员变量
        return data;
    }
};

//定义时不需要再加static
//静态变量即使在类中声明为私有变量,但任然需要在类外被定义、初始化
int MyPerson::data = 100; //类外定义+初始化

/*
 * 在类定义中，前面有 static 说明的成员函数称为静态成员函数。
 * 静态成员函数使用方式和静态变量一样，同样在对象没有创建前，即可通过类名调用。
 * 静态成员函数主要为了访问静态变量，但是，不能访问 普通成员变量。
   静态成员函数的意义，在于信息共享，数据沟通，而在于管理静态数据成员，完成对静态数据成员的封装。

   注意：静态成员变量 、静态成员函数都有权限之分权限:
   静态成员函数只能访问静态变量，不能访问 普通成员变量
   静态成员函数的使用和静态成员变量一样 静态成员函数也有访问权限
   普通成员函数可访问静态成员变量、也可以访问非静态成员变量
 */
void test10()
{
    //cout << MyPerson::data << endl; //error 静态变量私有化后 在类外不能被随意访问
    //cout << MyPerson::getStaticData() << endl; //error 普通成员函数 调用 依赖于 对象

    MyPerson md;
    cout << md.getStaticData() << endl;
    //存在问题: data是静态的 在创建对象之前 就已经存在
    //如果类没有实例化对象 难道就不能访问静态变量data吗?
    //解决上述问题 就要用到静态成员函数

    //1、静态成员函数  属于类  可以通过类名称直接访问
    cout << "静态变量 : " << MyPerson::getStaticData() << endl;

    //2、也可以通过对象名访问静态成员函数(对象共享静态成员函数)
    cout << "静态变量 : " << md.getStaticData() << endl;
}


//int main(int argc, char * argv[])
//{
//    //静态成员函数详解
//    test10();

//    return 0;
//}
